// Common types for permissions
export interface UserPermissionDetails {
  userId: string | User
  allowedFields: string[]
  read: boolean
  write: boolean
  update: boolean
  delete: boolean
  _id?: string // Optional, as it might be generated by the backend
}

export interface AccessPermissionRole {
  role: string
  permissions: UserPermissionDetails[]
  _id?: string // Optional, as it might be generated by the backend
}

export interface PermissionModule {
  _id: string
  module: string
  AccessPermissions: AccessPermissionRole[]
  createdAt: string
  updatedAt: string
  __v: number
  updatedBy?: string | User | null
}

// Add a User interface to handle populated user data
export interface User {
  _id: string
  email: string
  phone_Number: string
  role: string
  address: any[] // Define a more specific type if needed
  __v: number
  ticketsAssigned?: any[] // Optional
  cartId?: string | null // Optional
  fcmToken?: string | null // Optional
  wishlistId?: string | null // Optional
  last_login?: string // Optional
  vehicle_details?: any[] // Optional
}

// 1. GET /api/users/api/permissionMatrix/check-permission
export interface CheckPermissionResponseData {
  permissionModule: string
  role: string
  userPermissions: {
    allowedFields: string[]
    read: boolean
    write: boolean
    update: boolean
    delete: boolean
  }
}

export interface CheckPermissionResponse {
  message: string
  hasPermission: boolean
  data: CheckPermissionResponseData
}

// 2. POST /api/users/api/permissionMatrix/modules (for creating a new module with initial roles)
export interface AddModuleRequest {
  module: string
  roles: string[]
  updatedBy?: string | User // Optional, if the backend handles it or it's not always sent
}

export interface AddModuleResponseData {
  module: string
  AccessPermissions: Array<{
    role: string
    permissions: any[] // Can be more specific if permissions are always empty initially
    _id: string
  }>
  updatedBy: string | User | null
  _id: string
  createdAt: string
  updatedAt: string
  __v: number
}

export interface AddModuleResponse {
  message: string
  data: AddModuleResponseData
}

// 3. POST /api/users/api/permissionMatrix/permissions (for adding specific user permissions)
export interface AddPermissionsRequest {
  module: string
  role: string
  userIds: string[]
  permissions: {
    allowedFields: string[]
    read: boolean
    write: boolean
    update: boolean
    delete: boolean
  }
}

export interface AddPermissionsResponseData {
  module: PermissionModule
  results: {
    added: number
    skipped: number
    errors: number
  }
}

export interface AddPermissionsResponse {
  message: string
  data: AddPermissionsResponseData
}

// 4. POST /api/users/api/permissionMatrix/modules/add-roles
export interface AddRolesToModuleRequest {
  module: string
  roles: string[]
  updatedBy?: string | User
}

export interface AddRolesToModuleResponse {
  message: string
  data: PermissionModule
}

// 5. PUT /api/users/api/permissionMatrix/modules/remove-role
export interface RemoveRoleFromModuleRequest {
  module: string
  role: string
  updatedBy?: string | User
}

export interface RemoveRoleFromModuleResponse {
  message: string
  data: PermissionModule
}

// 6. PUT /api/users/api/permissionMatrix/modules/update
export interface UpdateModuleRequest {
  module: string
  newModuleName: string
  updatedBy?: string | User
}

export interface UpdateModuleResponse {
  message: string
  data: PermissionModule
}

// 7. PUT /api/users/api/permissionMatrix/permissions/update
export interface UpdateUserPermissionsRequest {
  module: string
  role: string
  userid: string | User
  permissions: {
    allowedFields: string[]
    read: boolean
    write: boolean
    update: boolean
    delete: boolean
  }
  updatedBy?: string | User
}

export interface UpdateUserPermissionsResponse {
  message: string
  data: PermissionModule
}

// 8. DELETE /api/users/api/permissionMatrix/permissions/remove
export interface RemoveUserPermissionsRequest {
  module: string
  role: string
  userid: string | User
  updatedBy?: string | User
}

export interface RemoveUserPermissionsResponse {
  message: string
  data: PermissionModule
}

// 9. GET /api/users/api/permissionMatrix/modules
export interface GetAllModulesResponse {
  message: string
  data: PermissionModule[]
}

// 10. GET /api/users/api/permissionMatrix/modulesRoles/:module
export interface GetModuleRolesResponse {
  message: string
  data: AccessPermissionRole[]
}

// 11. GET /api/users/api/permissionMatrix/permissions?module=Products
export interface GetPermissionsByModuleResponse {
  message: string
  data: PermissionModule[]
}

// 12. GET /api/users/api/permissionMatrix/permissions?module=Products&role=Super-admin
export interface GetPermissionsByModuleAndRoleResponse {
  message: string
  data: {
    _id: string
    AccessPermissions: AccessPermissionRole[]
  }
}

// 13. GET /api/users/api/permissionMatrix/permissions?module=Products&userId=...&role=...
export interface GetPermissionsByModuleUserAndRoleResponse {
  message: string
  data: {
    _id: string
    AccessPermissions: AccessPermissionRole[]
  }
}
